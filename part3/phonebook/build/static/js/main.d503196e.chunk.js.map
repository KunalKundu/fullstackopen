{"version":3,"sources":["components/Contacts.js","components/Form.js","components/Filter.js","services/persons.js","App.js","index.js"],"names":["Contacts","namesToShow","handleDelete","map","el","key","name","number","value","id","onClick","Form","addContact","newName","newNumber","handleNameChange","handleNumberChange","onSubmit","onChange","type","Filter","newQuery","handleQueryChange","baseUrl","axios","get","then","response","data","newObject","post","delete","put","Notification","message","className","text","App","useState","persons","setPersons","setNewName","setNewNumber","setNewQuery","addMessage","setMessage","useEffect","service","initialContacts","query","filter","toLowerCase","indexOf","event","target","preventDefault","checker","person","length","window","confirm","changedContact","find","returnedContact","catch","error","setTimeout","alert","contactObj","returnedContacts","concat","JSON","stringify","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d503196e.chunk.js","sourcesContent":["import React from 'react'\n\nconst Contacts = ({ namesToShow, handleDelete }) => {\n  return (\n    namesToShow.map(el => <p key={el.name}>{el.name} {el.number} <button value={el.id} name={el.name} onClick={handleDelete}>delete</button></p>)\n  )\n}\n\nexport default Contacts\n","import React from 'react'\n\nconst Form = ({addContact, newName, newNumber, handleNameChange, handleNumberChange}) => {\n  return (\n    <form onSubmit={addContact}>\n      <div>\n        <div>name: <input value={newName} onChange={handleNameChange} /></div>\n        <div>number: <input value={newNumber} onChange={handleNumberChange} /></div>\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  )\n}\n\n\nexport default Form\n","import React from 'react'\n\nconst Filter = ({newQuery, handleQueryChange}) => {\n  return (\n    <form>\n      <div>\n        <div>filter shown with <input value={newQuery} onChange={handleQueryChange}/></div>\n      </div>\n    </form>\n  )\n}\n\nexport default Filter\n","import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst createContact = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst deleteContact = (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`)\n  return request\n}\n\nconst updateContact = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, createContact, deleteContact, updateContact }\n","import React, { useState, useEffect } from 'react'\nimport Contacts from './components/Contacts'\nimport Form from './components/Form'\nimport Filter from './components/Filter'\nimport service from './services/persons'\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n  else {\n    if (message.type === 'success'){\n      return (\n        <div className=\"success\">\n          {message.text}\n        </div>\n      )\n    }\n    else {\n      return (\n        <div className='error'>\n          {message.text}\n        </div>\n      )\n    }\n  }\n\n}\n\nconst App = () => {\n\n\n  // state handlers\n  const [ persons, setPersons ] = useState([])\n\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ newQuery, setNewQuery ] = useState('')\n  const [ addMessage, setMessage] = useState(null)\n\n  // function for filtering using indexOf\n  const filterItems = (array, query) => {\n    return array.filter(el => el.name.toLowerCase().indexOf(query.toLowerCase()) !== -1);\n  }\n\n  // fetching initial state of persons from json-server\n  useEffect(() => {service.getAll().then(initialContacts => {setPersons(initialContacts)})}, [])\n\n  // event handler for search query\n  const handleQueryChange = (event) => {\n    setNewQuery(event.target.value)\n  }\n\n  // event handler for form\n  const addContact = (event) => {\n    event.preventDefault()\n\n    const checker = persons.filter(person => person.name===newName)\n\n    if (newName){\n\n      if (checker.length!==0){\n\n        if (!newNumber || newNumber===checker[0].number){\n          window.alert(`${newName} is already added to phonebook`)\n        }\n\n        else {\n          // updating contacts\n          if(window.confirm(`${checker[0].name} is already added to the phonebook, replace the old number with the new one?`)){\n            const contact = persons.find(el => el.id === checker[0].id)\n            const changedContact = { ...contact, number: newNumber }\n\n            service\n            .updateContact(checker[0].id, changedContact)\n            .then(returnedContact =>{\n              setPersons(persons.map(el =>el.id !== checker[0].id ? el : returnedContact))})\n              .catch(error => {\n                setMessage({text:`Information of ${checker[0].name} has already been removed from server`, type:'error'})\n                setTimeout(() => {setMessage(null)}, 3000)\n                setPersons(persons.filter(el => el.id !== checker[0].id))\n              })\n            // .catch(error => {alert('the contact was not updated at the server')})\n\n          setNewName(\"\")\n          setNewNumber(\"\")\n        }\n      }\n    }\n\n      else{\n        const contactObj = {\n          name: newName,\n          number: newNumber,\n        }\n\n        // Sending data to db.json(and saving it there), getting a response in return\n        // If response is successful, Object received with contents same as contactObj\n        service\n        .createContact(contactObj)\n        .then(returnedContacts => {\n          setPersons(persons.concat(returnedContacts))\n          // message for successful addition of contact\n          setMessage({text:`Added ${contactObj.name}`, type:'success'})\n          setTimeout(() => {setMessage(null)}, 3000)\n        })\n        .catch(error => {alert(JSON.stringify(error.response.data))})\n\n        setNewName(\"\")\n        setNewNumber(\"\")\n      }\n    }\n  }\n\n  // event handler for deletion\n  const handleDelete = (event) => {\n    if(window.confirm(`Delete ${event.target.name} ?`)){\n      service\n      .deleteContact(event.target.value)\n      .catch(error => {alert('the contact was not deleted from the server')})\n\n      setPersons(persons.filter(el => el.name !== event.target.name))\n    }\n  }\n\n  // event handler for input fields\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  // array selector for display\n  const namesToShow = newQuery\n    ? filterItems(persons, newQuery)\n    : persons\n\n\n// The way of passing properties to components is not good. Please find a way to do this properly.\n  return (\n    <div>\n      <Notification message={addMessage} />\n      <h1>Phonebook</h1>\n      <Filter newQuery={newQuery} handleQueryChange={handleQueryChange}/>\n      <h3>Add a new</h3>\n      <Form addContact={addContact} newName={newName} newNumber={newNumber} handleNameChange={handleNameChange} handleNumberChange={handleNumberChange}/>\n      <h3>Numbers</h3>\n      <Contacts namesToShow={namesToShow} handleDelete={handleDelete}/>\n    </div>\n  )\n\n\n}\n\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}